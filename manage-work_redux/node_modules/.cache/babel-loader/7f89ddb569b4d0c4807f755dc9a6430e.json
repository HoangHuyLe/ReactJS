{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\ReactJS\\\\manage-work_redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as types from './../constants/ActionTypes';\n\nvar s4 = () => {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nvar generateID = () => {\n  return s4() + s4() + s4() + s4();\n};\n\nvar data = [{\n  id: generateID(),\n  name: 'Hoc Lap Trinh',\n  status: true\n}, {\n  id: generateID(),\n  name: 'Hoc HTML',\n  status: true\n}, {\n  id: generateID(),\n  name: 'Hoc CSS',\n  status: false\n}];\n\nvar findIndex = (id, tasks) => {\n  var result = -1;\n  tasks.forEach((task, index) => {\n    if (id === task.id) {\n      result = index;\n      return result;\n    }\n  });\n  return result;\n};\n\nvar inintialState = [];\n\nvar tasksReducer = (state = inintialState, action) => {\n  let index = -1;\n\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.SAVE_TASK:\n      // 2 case: Add task and Editting task                  \n      var task = {\n        id: action.task.id,\n        name: action.task.name,\n        status: action.task.status\n      }; // case Add task\n\n      if (task.id == '') {\n        task.id = generateID();\n        state.push(task);\n      } // case Editting\n      else {\n          index = findIndex(task.id, state);\n          state[index] = task;\n        }\n\n      return [...state];\n\n    case types.GEN_TASK:\n      state = data;\n      return [...state];\n\n    case types.UPDATE_STATUS_TASK:\n      index = findIndex(action.id, state);\n\n      if (index !== -1) {\n        state[index] = _objectSpread({}, state[index], {\n          status: !state[index].status\n        });\n      }\n\n      return [...state];\n\n    case types.DELETE_TASK:\n      index = findIndex(action.id, state);\n\n      if (index !== -1) {\n        state.splice(index, 1); // index: start position, 1: number elem delete                      \n      }\n\n      return [...state];\n\n    default:\n      return state;\n  }\n};\n\nexport default tasksReducer; // onUpdate = (id) => {\n//   let index = this.findIndex(id);\n//   let { tasks } = this.state;\n//   let taskEditing = tasks[index];\n//   this.setState({\n//     taskEditing: taskEditing,\n//   })\n//   this.onShowForm();\n// }","map":{"version":3,"sources":["C:\\Users\\Administrator\\Desktop\\ReactJS\\manage-work_redux\\src\\reducers\\tasks.js"],"names":["types","s4","Math","floor","random","toString","substring","generateID","data","id","name","status","findIndex","tasks","result","forEach","task","index","inintialState","tasksReducer","state","action","type","LIST_ALL","SAVE_TASK","push","GEN_TASK","UPDATE_STATUS_TASK","DELETE_TASK","splice"],"mappings":"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","sourcesContent":["import * as types from './../constants/ActionTypes';\r\n\r\nvar s4 = () => {\r\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n}\r\n\r\nvar generateID = () => {\r\n      return s4() + s4() + s4() + s4();\r\n};\r\n\r\nvar data = [\r\n      {\r\n            id: generateID(),\r\n            name: 'Hoc Lap Trinh',\r\n            status: true,\r\n      },\r\n      {\r\n            id: generateID(),\r\n            name: 'Hoc HTML',\r\n            status: true,\r\n      },\r\n      {\r\n            id: generateID(),\r\n            name: 'Hoc CSS',\r\n            status: false,\r\n      }\r\n];\r\n\r\nvar findIndex = (id, tasks) => {\r\n      var result = -1;\r\n      tasks.forEach((task, index) => {\r\n            if (id === task.id) {\r\n                  result = index\r\n                  return result;\r\n            }\r\n      })\r\n      return result;\r\n}\r\n\r\nvar inintialState = [\r\n\r\n];\r\n\r\nvar tasksReducer = (state = inintialState, action) => {\r\n      let index = -1;\r\n      switch (action.type) {\r\n            case types.LIST_ALL:\r\n                  return state;\r\n            case types.SAVE_TASK:\r\n                  // 2 case: Add task and Editting task                  \r\n                  var task = {\r\n                        id: action.task.id,\r\n                        name: action.task.name,\r\n                        status: action.task.status\r\n                  }\r\n                  // case Add task\r\n                  if(task.id == ''){\r\n                        task.id = generateID();\r\n                        state.push(task);\r\n                  }\r\n                  // case Editting\r\n                  else {\r\n                        index = findIndex(task.id, state);\r\n                        state[index] = task;\r\n                  }\r\n                  return [...state];\r\n            case types.GEN_TASK:\r\n                  state = data;\r\n                  return [...state];\r\n            case types.UPDATE_STATUS_TASK:\r\n                  index = findIndex(action.id, state);\r\n                  if (index !== -1) {\r\n                        state[index] = {\r\n                              ...state[index],\r\n                              status: !state[index].status\r\n                        }\r\n                  }\r\n                  return [...state];\r\n            case types.DELETE_TASK:\r\n                  index = findIndex(action.id, state);\r\n                  if (index !== -1) {\r\n                        state.splice(index, 1); // index: start position, 1: number elem delete                      \r\n                  }\r\n                  return [...state];\r\n            default:\r\n                  return state;\r\n      }\r\n\r\n}\r\n\r\nexport default tasksReducer;\r\n\r\n\r\n\r\n  // onUpdate = (id) => {\r\n  //   let index = this.findIndex(id);\r\n  //   let { tasks } = this.state;\r\n  //   let taskEditing = tasks[index];\r\n  //   this.setState({\r\n  //     taskEditing: taskEditing,\r\n  //   })\r\n\r\n  //   this.onShowForm();\r\n  // }"]},"metadata":{},"sourceType":"module"}