{"ast":null,"code":"import * as types from './../constants/ActionTypes';\n\nvar s4 = () => {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nvar generateID = () => {\n  return s4() + s4() + s4() + s4();\n};\n\nvar data = [{\n  id: generateID(),\n  name: 'Hoc Lap Trinh',\n  status: true\n}, {\n  id: generateID(),\n  name: 'Hoc HTML',\n  status: true\n}, {\n  id: generateID(),\n  name: 'Hoc CSS',\n  status: false\n}];\n\nfindIndex = id => {\n  var tasks = this.state.tasks;\n  var result = -1;\n  tasks.forEach((task, index) => {\n    if (id === task.id) {\n      result = index;\n      return result;\n    }\n  });\n  return result;\n};\n\nvar inintialState = [];\n\nvar tasksReducer = (state = inintialState, action) => {\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.ADD_TASK:\n      var newTask = {\n        id: generateID(),\n        name: action.task.name,\n        status: action.task.status === true ? true : false\n      };\n      state.push(newTask);\n      return [...state];\n\n    case types.GEN_TASK:\n      state = data;\n      return state;\n\n    case types.UPDATE_STATUS_TASK:\n      console.log(action);\n      let index = this.findIndex(id);\n      let tasks = this.state.tasks;\n\n      if (index !== -1) {\n        tasks[index].status = !tasks[index].status;\n        this.setState({\n          tasks: tasks\n        });\n      }\n\n      return [...state];\n\n    default:\n      return state;\n  }\n};\n\nexport default tasksReducer;","map":{"version":3,"sources":["/home/huy/Desktop/ReactJS/manage-work_redux/src/reducers/tasks.js"],"names":["types","s4","Math","floor","random","toString","substring","generateID","data","id","name","status","findIndex","tasks","state","result","forEach","task","index","inintialState","tasksReducer","action","type","LIST_ALL","ADD_TASK","newTask","push","GEN_TASK","UPDATE_STATUS_TASK","console","log","setState"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,4BAAvB;;AAEA,IAAIC,EAAE,GAAG,MAAM;AACT,SAAOC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAID,IAAI,CAACE,MAAL,EAAL,IAAsB,OAAjC,EAA0CC,QAA1C,CAAmD,EAAnD,EAAuDC,SAAvD,CAAiE,CAAjE,CAAP;AACL,CAFD;;AAIA,IAAIC,UAAU,GAAG,MAAM;AACjB,SAAON,EAAE,KAAKA,EAAE,EAAT,GAAcA,EAAE,EAAhB,GAAqBA,EAAE,EAA9B;AACL,CAFD;;AAIA,IAAIO,IAAI,GAAG,CACL;AACMC,EAAAA,EAAE,EAAEF,UAAU,EADpB;AAEMG,EAAAA,IAAI,EAAE,eAFZ;AAGMC,EAAAA,MAAM,EAAE;AAHd,CADK,EAML;AACMF,EAAAA,EAAE,EAAEF,UAAU,EADpB;AAEMG,EAAAA,IAAI,EAAE,UAFZ;AAGMC,EAAAA,MAAM,EAAE;AAHd,CANK,EAWL;AACMF,EAAAA,EAAE,EAAEF,UAAU,EADpB;AAEMG,EAAAA,IAAI,EAAE,SAFZ;AAGMC,EAAAA,MAAM,EAAE;AAHd,CAXK,CAAX;;AAkBAC,SAAS,GAAIH,EAAD,IAAQ;AAAA,MACRI,KADQ,GACE,KAAKC,KADP,CACRD,KADQ;AAEd,MAAIE,MAAM,GAAG,CAAC,CAAd;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAc,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC7B,QAAIT,EAAE,KAAKQ,IAAI,CAACR,EAAhB,EAAoB;AAClBM,MAAAA,MAAM,GAAGG,KAAT;AACA,aAAOH,MAAP;AACD;AACF,GALD;AAMA,SAAOA,MAAP;AACL,CAVD;;AAYA,IAAII,aAAa,GAAG,EAApB;;AAIA,IAAIC,YAAY,GAAG,CAACN,KAAK,GAAGK,aAAT,EAAwBE,MAAxB,KAAmC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACM,SAAKtB,KAAK,CAACuB,QAAX;AACM,aAAOT,KAAP;;AACN,SAAKd,KAAK,CAACwB,QAAX;AACM,UAAIC,OAAO,GAAG;AACRhB,QAAAA,EAAE,EAAEF,UAAU,EADN;AAERG,QAAAA,IAAI,EAAEW,MAAM,CAACJ,IAAP,CAAYP,IAFV;AAGRC,QAAAA,MAAM,EAAEU,MAAM,CAACJ,IAAP,CAAYN,MAAZ,KAAuB,IAAvB,GAA8B,IAA9B,GAAqC;AAHrC,OAAd;AAKAG,MAAAA,KAAK,CAACY,IAAN,CAAWD,OAAX;AACA,aAAO,CAAC,GAAGX,KAAJ,CAAP;;AACN,SAAKd,KAAK,CAAC2B,QAAX;AACMb,MAAAA,KAAK,GAAGN,IAAR;AACA,aAAOM,KAAP;;AACN,SAAKd,KAAK,CAAC4B,kBAAX;AACMC,MAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACA,UAAIH,KAAK,GAAG,KAAKN,SAAL,CAAeH,EAAf,CAAZ;AAFN,UAGYI,KAHZ,GAGsB,KAAKC,KAH3B,CAGYD,KAHZ;;AAIM,UAAIK,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBL,QAAAA,KAAK,CAACK,KAAD,CAAL,CAAaP,MAAb,GAAsB,CAACE,KAAK,CAACK,KAAD,CAAL,CAAaP,MAApC;AACA,aAAKoB,QAAL,CAAc;AACZlB,UAAAA,KAAK,EAAEA;AADK,SAAd;AAGD;;AACD,aAAO,CAAC,GAAGC,KAAJ,CAAP;;AACN;AACM,aAAOA,KAAP;AA1BZ;AA6BL,CA9BD;;AAgCA,eAAeM,YAAf","sourcesContent":["import * as types from './../constants/ActionTypes';\n\nvar s4 = () => {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n}\n\nvar generateID = () => {\n      return s4() + s4() + s4() + s4();\n};\n\nvar data = [\n      {\n            id: generateID(),\n            name: 'Hoc Lap Trinh',\n            status: true,\n      },\n      {\n            id: generateID(),\n            name: 'Hoc HTML',\n            status: true,\n      },\n      {\n            id: generateID(),\n            name: 'Hoc CSS',\n            status: false,\n      }\n];\n\nfindIndex = (id) => {\n      var { tasks } = this.state;\n      var result = -1;\n      tasks.forEach((task, index) => {\n        if (id === task.id) {\n          result = index\n          return result;\n        }\n      })\n      return result;\n}\n\nvar inintialState = [\n\n];\n\nvar tasksReducer = (state = inintialState, action) => {\n      switch (action.type) {\n            case types.LIST_ALL:\n                  return state;\n            case types.ADD_TASK:\n                  var newTask = {\n                        id: generateID(),\n                        name: action.task.name,\n                        status: action.task.status === true ? true : false\n                  }\n                  state.push(newTask);\n                  return [...state];\n            case types.GEN_TASK:                 \n                  state = data;\n                  return state;\n            case types.UPDATE_STATUS_TASK:\n                  console.log(action);\n                  let index = this.findIndex(id);\n                  let { tasks } = this.state;\n                  if (index !== -1) {\n                    tasks[index].status = !tasks[index].status;\n                    this.setState({\n                      tasks: tasks\n                    })\n                  }\n                  return [...state];\n            default:\n                  return state;\n      }\n\n}\n\nexport default tasksReducer;\n\n"]},"metadata":{},"sourceType":"module"}